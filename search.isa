#include "sha256.isa"
#include "sha256_fresh.isa"
#include "sha256_fixed.isa"
#include "sha256_last.isa"
#include "endian_swap.isa"

s_buffer_load_dword     s13, s[4:7], 0x18       ; global_work_offset, s[4:7] unused
s_load_dwordx4          s[4:7], s[2:3], 0x68    ; base of output
s_load_dwordx4          s[0:3], s[2:3], 0x60    ; base of padcache
s_buffer_load_dwordx4   s[16:19], s[8:11], 0x00 ; input0
s_buffer_load_dwordx4   s[20:23], s[8:11], 0x04 ; input1
s_buffer_load_dwordx4   s[24:27], s[8:11], 0x08 ; input2
s_buffer_load_dwordx4   s[28:31], s[8:11], 0x0c ; input3
s_buffer_load_dwordx4   s[32:35], s[8:11], 0x10 ; input4
s_buffer_load_dwordx4   s[36:39], s[8:11], 0x14 ; midstate0
s_buffer_load_dwordx4   s[40:43], s[8:11], 0x18 ; midstate16
s_buffer_load_dword     s15, s[8:11], 0x1c      ; offset of output
s_buffer_load_dword     s14, s[8:11], 0x20      ; offset of padcache
s_lshl_b32              s12, s12, 8
s_waitcnt               lgkmcnt(0)
s_add_i32               s13, s13, s12
v_add_i32               v0, s13, v0             ; global_id
s_mov_b32               s13, 0x00ff00ff


; pad0 & pad1
v_mov_b32   v60, s36
v_mov_b32   v61, s37
v_mov_b32   v62, s38
v_mov_b32   v63, s39
v_mov_b32   v64, s40
v_mov_b32   v65, s41
v_mov_b32   v66, s42
v_mov_b32   v67, s43

sha256(
    v60, v61, v62, v63, v64, v65, v66, v67,
    s32, s33, s34, v0, K84, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, K86,
    v52, v53, v54, v55, v56, v57, v58, v59,
    v36, v37, v38, v39, v40, v41, v42, v43,
    v44, v45, v46, v47, v48, v49, v50, v51,
    v1, v2
)


; pad2 & pad3
s_mov_b32   s8, K82
v_xor_b32   v68, s8, v60
v_xor_b32   v69, s8, v61
v_xor_b32   v70, s8, v62
v_xor_b32   v71, s8, v63
v_xor_b32   v72, s8, v64
v_xor_b32   v73, s8, v65
v_xor_b32   v74, s8, v66
v_xor_b32   v75, s8, v67

sha256_fresh(
    v84, v85, v86, v87, v88, v89, v90, v91,
    v68, v69, v70, v71, v72, v73, v74, v75,
    s8, s8, s8, s8, s8, s8, s8, s8,
    v36, v37, v38, v39, v40, v41, v42, v43,
    v44, v45, v46, v47, v48, v49, v50, v51,
    v1, v2, s9
)

; pad2 & pad3
s_mov_b32   s8, K83
v_xor_b32   v68, s8, v60
v_xor_b32   v69, s8, v61
v_xor_b32   v70, s8, v62
v_xor_b32   v71, s8, v63
v_xor_b32   v72, s8, v64
v_xor_b32   v73, s8, v65
v_xor_b32   v74, s8, v66
v_xor_b32   v75, s8, v67

sha256_fresh(
    v76, v77, v78, v79, v80, v81, v82, v83,
    v68, v69, v70, v71, v72, v73, v74, v75,
    s8, s8, s8, s8, s8, s8, s8, s8,
    v36, v37, v38, v39, v40, v41, v42, v43,
    v44, v45, v46, v47, v48, v49, v50, v51,
    v1, v2, s9
)

; tmp0 & tmp1
v_mov_b32   v92, v76
v_mov_b32   v93, v77
v_mov_b32   v94, v78
v_mov_b32   v95, v79
v_mov_b32   v96, v80
v_mov_b32   v97, v81
v_mov_b32   v98, v82
v_mov_b32   v99, v83

sha256(
    v76, v77, v78, v79, v80, v81, v82, v83,
    s16, s17, s18, s19, s20, s21, s22, s23,
    s24, s25, s26, s27, s28, s29, s30, s31,
    v52, v53, v54, v55, v56, v57, v58, v59,
    v36, v37, v38, v39, v40, v41, v42, v43,
    v44, v45, v46, v47, v48, v49, v50, v51,
    v1, v2
)

; pad0 & pad1
v_mov_b32   v60, v76
v_mov_b32   v61, v77
v_mov_b32   v62, v78
v_mov_b32   v63, v79
v_mov_b32   v64, v80
v_mov_b32   v65, v81
v_mov_b32   v66, v82
v_mov_b32   v67, v83

; X[0] & X[1]
v_mov_b32   v4, v84
v_mov_b32   v5, v85
v_mov_b32   v6, v86
v_mov_b32   v7, v87
v_mov_b32   v8, v88
v_mov_b32   v9, v89
v_mov_b32   v10, v90
v_mov_b32   v11, v91

sha256(
    v60, v61, v62, v63, v64, v65, v66, v67,
    s32, s33, s34, v0, 1, K84, 0, 0,
    0, 0, 0, 0, 0, 0, 0, K87,
    v52, v53, v54, v55, v56, v57, v58, v59,
    v36, v37, v38, v39, v40, v41, v42, v43,
    v44, v45, v46, v47, v48, v49, v50, v51,
    v1, v2
)

sha256(
    v4, v5, v6, v7, v8, v9, v10, v11,
    v60, v61, v62, v63, v64, v65, v66, v67,
    K84, 0, 0, 0, 0, 0, 0, K88,
    v52, v53, v54, v55, v56, v57, v58, v59,
    v36, v37, v38, v39, v40, v41, v42, v43,
    v44, v45, v46, v47, v48, v49, v50, v51,
    v1, v2
)

; pad0 & pad1
v_mov_b32   v60, v76
v_mov_b32   v61, v77
v_mov_b32   v62, v78
v_mov_b32   v63, v79
v_mov_b32   v64, v80
v_mov_b32   v65, v81
v_mov_b32   v66, v82
v_mov_b32   v67, v83

; X[2] & X[3]
v_mov_b32   v12, v84
v_mov_b32   v13, v85
v_mov_b32   v14, v86
v_mov_b32   v15, v87
v_mov_b32   v16, v88
v_mov_b32   v17, v89
v_mov_b32   v18, v90
v_mov_b32   v19, v91

sha256(
    v60, v61, v62, v63, v64, v65, v66, v67,
    s32, s33, s34, v0, 2, K84, 0, 0,
    0, 0, 0, 0, 0, 0, 0, K87,
    v52, v53, v54, v55, v56, v57, v58, v59,
    v36, v37, v38, v39, v40, v41, v42, v43,
    v44, v45, v46, v47, v48, v49, v50, v51,
    v1, v2
)

sha256(
    v12, v13, v14, v15, v16, v17, v18, v19,
    v60, v61, v62, v63, v64, v65, v66, v67,
    K84, 0, 0, 0, 0, 0, 0, K88,
    v52, v53, v54, v55, v56, v57, v58, v59,
    v36, v37, v38, v39, v40, v41, v42, v43,
    v44, v45, v46, v47, v48, v49, v50, v51,
    v1, v2
)

; pad0 & pad1
v_mov_b32   v60, v76
v_mov_b32   v61, v77
v_mov_b32   v62, v78
v_mov_b32   v63, v79
v_mov_b32   v64, v80
v_mov_b32   v65, v81
v_mov_b32   v66, v82
v_mov_b32   v67, v83

; X[4] & X[5]
v_mov_b32   v20, v84
v_mov_b32   v21, v85
v_mov_b32   v22, v86
v_mov_b32   v23, v87
v_mov_b32   v24, v88
v_mov_b32   v25, v89
v_mov_b32   v26, v90
v_mov_b32   v27, v91

sha256(
    v60, v61, v62, v63, v64, v65, v66, v67,
    s32, s33, s34, v0, 3, K84, 0, 0,
    0, 0, 0, 0, 0, 0, 0, K87,
    v52, v53, v54, v55, v56, v57, v58, v59,
    v36, v37, v38, v39, v40, v41, v42, v43,
    v44, v45, v46, v47, v48, v49, v50, v51,
    v1, v2
)

sha256(
    v20, v21, v22, v23, v24, v25, v26, v27,
    v60, v61, v62, v63, v64, v65, v66, v67,
    K84, 0, 0, 0, 0, 0, 0, K88,
    v52, v53, v54, v55, v56, v57, v58, v59,
    v36, v37, v38, v39, v40, v41, v42, v43,
    v44, v45, v46, v47, v48, v49, v50, v51,
    v1, v2
)

; pad0 & pad1
v_mov_b32   v60, v76
v_mov_b32   v61, v77
v_mov_b32   v62, v78
v_mov_b32   v63, v79
v_mov_b32   v64, v80
v_mov_b32   v65, v81
v_mov_b32   v66, v82
v_mov_b32   v67, v83

; X[6] & X[7]
v_mov_b32   v28, v84
v_mov_b32   v29, v85
v_mov_b32   v30, v86
v_mov_b32   v31, v87
v_mov_b32   v32, v88
v_mov_b32   v33, v89
v_mov_b32   v34, v90
v_mov_b32   v35, v91

sha256(
    v60, v61, v62, v63, v64, v65, v66, v67,
    s32, s33, s34, v0, 4, K84, 0, 0,
    0, 0, 0, 0, 0, 0, 0, K87,
    v52, v53, v54, v55, v56, v57, v58, v59,
    v36, v37, v38, v39, v40, v41, v42, v43,
    v44, v45, v46, v47, v48, v49, v50, v51,
    v1, v2
)

sha256(
    v28, v29, v30, v31, v32, v33, v34, v35,
    v60, v61, v62, v63, v64, v65, v66, v67,
    K84, 0, 0, 0, 0, 0, 0, K88,
    v52, v53, v54, v55, v56, v57, v58, v59,
    v36, v37, v38, v39, v40, v41, v42, v43,
    v44, v45, v46, v47, v48, v49, v50, v51,
    v1, v2
)

#include "scrypt_core.isa"

sha256(
    v92, v93, v94, v95, v96, v97, v98, v99,
    v4, v5, v6, v7, v8, v9, v10, v11,
    v12, v13, v14, v15, v16, v17, v18, v19,
    v52, v53, v54, v55, v56, v57, v58, v59,
    v36, v37, v38, v39, v40, v41, v42, v43,
    v44, v45, v46, v47, v48, v49, v50, v51,
    v1, v2
)

sha256(
    v92, v93, v94, v95, v96, v97, v98, v99,
    v20, v21, v22, v23, v24, v25, v26, v27,
    v28, v29, v30, v31, v32, v33, v34, v35,
    v52, v53, v54, v55, v56, v57, v58, v59,
    v36, v37, v38, v39, v40, v41, v42, v43,
    v44, v45, v46, v47, v48, v49, v50, v51,
    v1, v2
)

sha256_fixed(
    v92, v93, v94, v95, v96, v97, v98, v99,
    v52, v53, v54, v55, v56, v57, v58, v59,
    v1, v2
)

sha256_last(
    v84, v85, v86, v87, v88, v89, v90, v91,
    v92, v93, v94, v95, v96, v97, v98, v99,
    K84, 0, 0, 0, 0, 0, 0, K88,
    v52, v53, v54, v55, v56, v57, v58, v59,
    v36, v37, v38, v39, v40, v41, v42, v43,
    v44, v45, v46, v47, v48, v49, v50, v51,
    v1, v2
)

endian_swap(v91, s8, v1)
;v_cmp_ge_u32        vcc, s35, v91
;raw                 0x7D8CB635
v_cmp_ge_u32        vcc, s35, v91
s_and_saveexec_b64  s[10:11], vcc
s_cbranch_execz     label_end
v_mov_b32           v2, s15
tbuffer_load_format_x   v3, v2, s[4:7], 0 offen offset:1020 format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT]
s_waitcnt           vmcnt(0)
v_add_i32           v4, 1, v3
tbuffer_store_format_x  v4, v2, s[4:7], 0 offen offset:1020 format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT]
;s_waitcnt           vmcnt(0) & expcnt(0)
s_waitcnt           0x0F00
v_lshlrev_b32       v3, 2, v3
v_add_i32           v3, s15, v3
tbuffer_store_format_x  v0, v3, s[4:7], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT]
;s_waitcnt           vmcnt(0) & expcnt(0)
s_waitcnt           0x0F00

label_end:
s_endpgm
